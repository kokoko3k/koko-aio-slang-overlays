#    Koko-aio shader is meant to be an all-in one crt shader.
#    It can be configured with many parameters, so that can be
#    scaled to run on even on modest gpus while still developed to
#    run with heavier presets on at least Haswell+ iGpus.
#    It is not meant to simulate the internal behaviour of CRT displays,
#    but to give users the parameters to make their monitors to look similar.
#    Several presets are included.

#    Actually it provides emulation for:
#        scanlines, screenlines, RGB vertical masks, horizontal slot masks,
#        glowing, haloing, blooming, gamma and SATURATION correction,pixel_outi        
#        black frame insertions, interlace emulation, antialiasing.

#    External code by:
#    * Nvidia (FXAA)



    
# Bezel texture contains the following infomations:
#   - The red channel represents the luminance information
#   - The green channel represents the highlights
#   - The alpha channel in the inner frame represents the part of the bezel that will be filled by the game content
#   - The blue channel represents the part of the bezel that will be filled by the game reflection.


                textures = "monitor_body_curved;monitor_body_straight;bg_under;bg_over;backdrop"
                
            monitor_body_curved = "../../textures/monitor_body_curved.png"
     monitor_body_curved_linear = "true"
  # Does this work?
  monitor_body_curved_wrap_mode = "clamp_to_edge"
     monitor_body_curved_mipmap = "true"

            monitor_body_straight = "../../textures/monitor_body_straight.png"
     monitor_body_straight_linear = "true"
  # Does this work?
  monitor_body_straight_wrap_mode = "clamp_to_edge"
     monitor_body_straight_mipmap = "true"
     
                bg_under = "../../textures/background_under.png"
         bg_under_linear = "true"
      bg_under_wrap_mode = "mirrored_repeat"
         bg_under_mipmap = "false"
         
				 bg_over = "01-background_over.png"
          bg_over_linear = "true"
       bg_over_wrap_mode = "mirrored_repeat"
          bg_over_mipmap = "false"

        #This is for support for arcade backdrop pictures, enable it in config.inc.
                backdrop = "../../textures/boothill.jpg"
         backdrop_linear = "true"
      backdrop_wrap_mode = "mirrored_repeat"
         backdrop_mipmap = "true"

shaders = 17

# NTSC Color artifacts pass:
# The very first pass emulates ntsc color artifacting.
# Being a fast single pass process, don't expect it to be 100% accurate
# It is able to drag rainbows as seen in Megadrive games with an option
# To make it oblique.
# It also does input color corrections to the input signal (saturation,brightness,contrast...)
# It also does motion blur for dot matrix.
           shader0 = ../../shaders-ng/colortools_and_ntsc_pass.slang
            alias0 = "colortools_and_ntsc_pass"
#float_framebuffer needed by phosphor persistance
float_framebuffer0 = true
    filter_linear0 = false
       scale_type0 = source
            scale0 = 1.0
        wrap_mode0 = "mirrored_repeat"


        
# This pass, emulates the flickering observed on crts when the input signal is interlaced
# and there is high brightness difference between adiacent scanlines.
# This pass is able to generate mipmaps because the next pass has mipmap_input true.
#
# Note that the wrap_mode is set to "mirrored_repeat".
# This allow to cheaply generate a mirrored image that will be used later on to
# draw reflections on the bezel.
#
# Also, it upscales the input signal to 2X.
# This is needed because FXAA, the glow and the halo pass works best at at least 640x480 resolution.
# Note that this is needed only for lowres content, but if the input signal is already at that
# size, there is no need to scale to 2x, and it is possible to gain performance by turning
# scale_x1 and scale_y1 from 2.0 to 1.0.
#
# A special note for P-UAE core (Commodore Amiga), is needed, because it outputs by default to
# 720 pixel width and about 280p; this means that for P-UAE you can use scale_x1 = 1.0
# and only scale_y1 = 2.0 is needed.
# As an alternative option you can configure P-UAE to always output to low resolution for x and y
# But this way you loose the emulation for hires content (not much games uses it anyway).
           shader1 = ../../shaders-ng/flick_and_noise.slang
            alias1 = "flick_and_noise_pass"
    filter_linear1 = false
       scale_type1 = source
          scale_x1 = 2.0
          scale_y1 = 2.0  
        wrap_mode1 = "mirrored_repeat"



# Nvidia fxaa pass:
# works good for "SD" resolutions
# FXAA don't really need any mipmap, but since mipmaps from first_pass are needed by
# some subsequent passes, specify that FXAA_pass wants mipmaps
# makes first_pass mipmaps available to everyone.
# Even if theoretically not needed, texture() occurrence in FXAA_pass needed to be switched 
# to textureLod(..,0.0) or it acts weird, don't ask me why.
           shader2 = ../../shaders-ng/fxaa.slang
            alias2 = "FXAA_pass"
    filter_linear2 = true
       scale_type2 = source
            scale2 = 1.0
     mipmap_input2 = true
      //This *has* to be mirrored_repeat reflection_blur uses high lods
      //from first_pass to emulate light diffusion 
        wrap_mode2 = "mirrored_repeat"

        

# This pass emulates NTSC/PAL composite color bleeding and deconvergence
# deconvergence should really be applied in th final pass, but it is too heavy there.
# This pass also apply the input gamma needed for glow pass.
           shader3 = ../../shaders-ng/shift_and_bleed.slang
            alias3 = "shift_and_bleed_pass"
    filter_linear3 = true
            scale3 = 1.0
       scale_type3 = source
float_framebuffer3 = true
     mipmap_input3 = false
        wrap_mode3 = "mirrored_repeat"

        
        
# Blur and/or glows the image as requested 
# This passes aims to simulate the signal input power.
           shader4 = ../../shaders-ng/in_glow_x.slang
            alias4 = "in_glow_pass_x"
    filter_linear4 = true
            scale4 = 1.0
       scale_type4 = source    
float_framebuffer4 = true
        wrap_mode4 = "mirrored_repeat"
     mipmap_input4 = true
        
           shader5 = ../../shaders-ng/in_glow_y.slang
            alias5 = "in_glow_pass"
    filter_linear5 = true
            scale5 = 1.0
       scale_type5 = source    
float_framebuffer5 = true
        wrap_mode5 = "mirrored_repeat"
            
          
        
# This essentially is the same as glowing by a code point of view.
# But the result of this pass will be added (+) to the input signal
# in the final pass.
           shader6 = ../../shaders-ng/halo_pre_gamma.slang
            alias6 = "halo_pre_gamma_pass"
    filter_linear6 = true
            scale6 = 1.0
       scale_type6 = source
float_framebuffer6 = true
     mipmap_input6 = false
        wrap_mode6 = "clamp_to_edge"
        
           shader7 = ../../shaders-ng/halo.slang
            alias7 = "halo_pass"
    filter_linear7 = true
            scale7 = 1.0
       scale_type7 = source
float_framebuffer7 = true
     mipmap_input7 = false
        wrap_mode7 = "clamp_to_edge"



# Get the average luminance needed by ambilight here, because:
#   * mipmap_input only works on "Source" texture
#   * the following pass does not use the previous one 
#   * the previous pass represents scene changes.

#   The rgb channels of the following pass contains luminance info
#   Used by the bezel code to light up the bezel corners.
#   The alpha channel contains the sum/3.0 of rgb channels
#   used to detect scene changes.

# This pass computes the average luminance of the image
# by grabbing a mipmap from first_pass.
# It stores at:
# alpha@coords 0.25,0.25 at reduced sampling to aid ambient light scene change detection
# alpha@coords 0.75,0.75 temporally smoother for use with bloom exposure and dynamic zoom
# rgb: it puts a small mipmap from first_pass that will be used to light-up the bezel highlights
# alpha@other coords: simple continuous sampling used to modulate bezel highlights strength.
               shader8 = ../../shaders-ng/avglum_pass.slang
                alias8 = "avglum_pass"
        filter_linear8 = true
           scale_type8 = source
                scale8 = 0.5
            wrap_mode8 = "mirrored_repeat"
         mipmap_input8 = false

         
         
# The following passes will blur the mirrored part of first_pass
# to emulate soft bezel reflections.

               shader9 = ../../shaders-ng/reflection_blur_pre.slang
                alias9 = "reflected_blurred_pass_pre"
        filter_linear9 = true
           scale_type9 = source
                scale9 = 1.0
            wrap_mode9 = "clamp_to_border"

            
               shader10 = ../../shaders-ng/reflection_blur.slang
                alias10 = "reflected_blurred_pass"
        filter_linear10 = true
           scale_type10 = source
                scale10 = 1.0
         mipmap_input10 = false
            wrap_mode10 = "mirrored_repeat"

# In the following passes we emulate bloom effect.
# Since the radius has to be high, we sample first_pass
# and then do other blur passes at reduced size to keep it fast.
# Every blur pass samples radially around the center and offsets
# the starting point in every subsequent pass.
               shader11 = ../../shaders-ng/bloom_pass_1.slang
                alias11 = "bloom_pass_1"
        filter_linear11 = true
           scale_type11 = source
                scale11 = 1.0
            wrap_mode11 = "mirrored_repeat"
    
    
               shader12 = ../../shaders-ng/bloom_pass_2.slang
                alias12 = "bloom_pass_2"
        filter_linear12 = true
           scale_type12 = source
                scale12 = 0.5
            wrap_mode12 = "clamp_to_edge"

            
               shader13 = ../../shaders-ng/bloom_pass_3.slang
                alias13 = "bloom_pass_3"
        filter_linear13 = true
           scale_type13 = source
                scale13 = 1.0
            wrap_mode13 = "clamp_to_edge"

        
               shader14 = ../../shaders-ng/bloom_pass_4.slang
                alias14 = "bloom_pass_final"
        filter_linear14 = true
           scale_type14 = source
                scale14 = 1.0
            wrap_mode14 = "mirrored_repeat"
    float_framebuffer14 = "true"



# Gather mipmaps from first_pass and use them to light virtual leds under the virtual monitor 
# and temporally smooth led lights.
# Extra logic makes it possible to lower the led reaction time when a scene change is detected.
# this is achieved through average luminance sampling from avglum_pass
               shader15 = ../../shaders-ng/ambi_temporal_pass.slang
                alias15 = "ambi_temporal_pass"
        filter_linear15 = true
           scale_type15 = viewport
                scale15 = 0.05
            wrap_mode15 = "clamp_to_border"
    float_framebuffer15 = true
    

# This pass pass will do everything needed to happen at screen coordinates:
# * The composition of the previous passes with the bloomed image, 
# * vignette and spot light
# * Scanlines
# * Phosphors masks 
# * Black frame insertions
# * Bezel
# * Background images
           shader16 = ../../shaders-ng/final_pass.slang
            alias16 = "final_pass"
    filter_linear16 = true
       scale_type16 = viewport
            scale16 = 1.0
        wrap_mode16 = "mirrored_repeat"
        



shaders = "17"

DO_CCORRECTION = "1.000000"
IN_GLOW_POWER = "1.300000"
LUMINANCE = "0.200000"
TEMPERATURE = "7200.000000"
IN_GLOW_GAMMA = "2.000000"
GAMMA_OUT = "0.430000"

DO_FXAA = "1.0"

DO_SHIFT_RGB = "1.000000"
OFFSET_STRENGTH = "0.300000"
SHIFT_R = "-40.000000"
SHIFT_G = "-2.000000"
SHIFT_B = "40.000000"
DO_IN_GLOW = "1.000000"
IN_GLOW_W = "-0.800000"
IN_GLOW_H = "-0.800000"
DO_SAT_BLEED = "1.0"
SAT_BLEED_STRENGTH = "0.25"
SAT_BLEED_SIZE = "2.0"
SAT_BLEED_SIZE_LEFT = "3.0"
SAT_BLEED_SIZE_RIGHT = "3.0"
DO_PIXELGRID = "1.000000"
PIXELGRID_MIN_H = "0.300000"
PIXELGRID_MAX_H = "0.700000"
PIXELGRID_OFFSET_CORE = "0.200000"
PIXELGRID_H_PRST = "1.000000"
PIXELGRID_MAX_W = "0.400000"
PIXELGRID_GAMMA_W = "1.500000"
PIXELGRID_BASAL_GRID = "0.020000"
PIXELGRID_Y_MASK = "0.000000"
PIXELGRID_Y_MASK_COORDS = "0.000000"
PIXELGRID_Y_MASK_HEIGHT = "1.000000"
PIXELGRID_Y_MASK_SHIFT = "0.150000"
PIXELGRID_Y_MASK_STEEP = "1.000000"
PIXELGRID_Y_MASK_ON_WHITE = "0.000000"
PIXELGRID_Y_SPARK = "1.000000"
DO_HALO = "1.000000"
HALO_NO_PREGAIN = "1.000000"
HALO_POWER = "0.500000"
HALO_SHARPNESS = "6.500000"
HALO_VS_SCAN = "0.700000"
DO_BLOOM = "1.000000"
BLOOM_SIZE = "3.5"
BLOOM_MIX = "0.35"
BLOOM_POWER = "2.0"
BLOOM_GAMMA_OUT = "1.200000"
BLOOM_EYE_ADPT_SRT = "0.600000"
BLOOM_EYE_INERTIA = "750.000000"
DO_CURVATURE = "1.000000"
GEOM_CORNER_SIZE = "0.015000"
GEOM_CORNER_SMOOTH = "200.000000"
DO_BEZEL = "1.000000"
BEZEL_INNER_ZOOM = "-0.77"
BEZEL_FRAME_ZOOM = "-0.453006"
BEZEL_R = "0.000001"
BEZEL_G = "-1.000000"
BEZEL_B = "-1.000000"
BEZEL_CON = "1.999999"
BEZEL_REFL_STRENGTH = "0.500000"
BEZEL_DIFFUSION_STR = "0.500000"
BEZEL_SPCL_STRENGTH = "0.000000"
BEZEL_CORNER_DARK = "1.000000"
DO_BG_IMAGE = "1.000000"
BG_IMAGE_OVER = "1.000000"
BG_IMAGE_OFFY = "-0.023500"
BG_IMAGE_ZOOM = "1.110503"
BG_IMAGE_NIGHTIFY = "0.900000"
BACKDROP_OFFY = "0.001000"
AMBI_STEPS = "5.000000"
AMBI_FALLOFF = "0.500000"
AMBI_POWER = "3.049998"
AMBI_INT_OFFSET = "-0.260000"
AMBI_STRETCH = "0.300000"
AMBI_GAMMA = "1.000000"
AMBI_OVER_BEZEL = "0.000000"
AMBI_OVER_BEZEL_SIZE = "0.223000"
AMBI_BG_IMAGE_BLEND_MODE = "1.000000"
AMBI_ADD_ON_BLACK = "0.000000"
AMBI_BG_IMAGE_FORCE = "0.500000"
DO_VIGNETTE = "1.000000"
V_SIZE = "0.8"
DO_SPOT = "1.000000"
S_SIZE = "1.000000"
S_POWER = "0.050000"
DO_GLOBAL_SHZO = "1.000000"
GLOBAL_OFFX = "0.002500"
GLOBAL_OFFY = "-0.002500"
GLOBAL_ZOOM = "1.046997"


